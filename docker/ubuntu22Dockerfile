# At project root directory, building image with:
#
#  `docker build -t zzz/ubuntu22-build-server -f ./docker/ubuntu22Dockerfile .`
#  `docker run --rm -it zzz/ubuntu22-build-server bash`
#
FROM ubuntu:22.04 AS build

# Update and install req
RUN \
    --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    export DEBIAN_FRONTEND=noninteractive; \
    export DEBCONF_NONINTERACTIVE_SEEN=true; \
    echo 'tzdata tzdata/Areas select Etc' | debconf-set-selections; \
    echo 'tzdata tzdata/Zones/Etc select UTC' | debconf-set-selections; \
    apt-get update -qqy && \
    apt-get install -qqy --no-install-recommends \
        tzdata \
        git \
        sudo \
        time \
        ninja-build && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

WORKDIR /home/meshlib

# Copy files
COPY .git .git
COPY cmake cmake
COPY thirdparty thirdparty
COPY scripts scripts
COPY source source
COPY requirements requirements

# Build and install thirdparty
ENV MR_STATE=DOCKER_BUILD
RUN ./scripts/build_thirdparty.sh


FROM nvidia/cuda:12.1.0-devel-ubuntu22.04 AS production

WORKDIR /usr/local/lib/meshlib-thirdparty-lib/

COPY scripts/install_apt_requirements.sh scripts/install_apt_requirements.sh
COPY scripts/mrbind/install_deps_ubuntu.sh scripts/mrbind/install_deps_ubuntu.sh
COPY scripts/mrbind/clang_version.txt scripts/mrbind/clang_version.txt
COPY scripts/install_thirdparty.sh scripts/install_thirdparty.sh
COPY scripts/patches scripts/patches
COPY requirements requirements
COPY scripts/mrbind-pybind11/python_versions.txt scripts/mrbind-pybind11/python_versions.txt
COPY scripts/mrbind-pybind11/install_all_python_versions_ubuntu_pkgs.sh scripts/mrbind-pybind11/install_all_python_versions_ubuntu_pkgs.sh

COPY --from=build /home/meshlib/lib /usr/local/lib/meshlib-thirdparty-lib/lib
COPY --from=build /home/meshlib/include /usr/local/lib/meshlib-thirdparty-lib/include

ENV MR_STATE=DOCKER_BUILD

# Update and install req
RUN \
    --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    export DEBIAN_FRONTEND=noninteractive; \
    export DEBCONF_NONINTERACTIVE_SEEN=true; \
    echo 'tzdata tzdata/Areas select Etc' | debconf-set-selections; \
    echo 'tzdata tzdata/Zones/Etc select UTC' | debconf-set-selections; \
    apt-get update -qqy && \
    apt-get install -qqy --no-install-recommends \
        tzdata \
        git \
        sudo \
        time \
        xvfb \
        curl \
        wget \
        unzip \
        ninja-build \
        patchelf && \
    ./scripts/install_apt_requirements.sh && \
    ./scripts/mrbind/install_deps_ubuntu.sh && \
    ./scripts/mrbind-pybind11/install_all_python_versions_ubuntu_pkgs.sh && \
    curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg && \
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null && \
    apt-get update -y && \
    apt-get install -y gh g++-12 clang-14 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Update cmake
RUN \
    --mount=type=cache,target=/var/cache/apt,sharing=locked \
    --mount=type=cache,target=/var/lib/apt,sharing=locked \
    apt remove --purge --auto-remove -y cmake && \
    apt update && \
    apt install -y software-properties-common lsb-release && \
    apt clean all && \
    wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | gpg --dearmor - | tee /etc/apt/trusted.gpg.d/kitware.gpg >/dev/null && \
    apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 42D5A192B819C5DA && \
    apt update && \
    apt install -y kitware-archive-keyring && \
    rm /etc/apt/trusted.gpg.d/kitware.gpg && \
    apt update && \
    apt install -y cmake && \
    rm -rf /var/lib/apt/lists/*

RUN ./scripts/install_thirdparty.sh && \
    echo '/usr/local/lib' | tee -a  /etc/ld.so.conf && \
    sudo ldconfig

# Install aws cli
RUN ARCH=$(uname -m) && \
    case $ARCH in \
        x86_64) ARCH_URL="https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" ;; \
        aarch64) ARCH_URL="https://awscli.amazonaws.com/awscli-exe-linux-aarch64.zip" ;; \
        *) echo "Unsupported architecture: $ARCH" && exit 1 ;; \
    esac && \
    curl "$ARCH_URL" -o "awscliv2.zip" && \
    unzip awscliv2.zip && \
    sudo ./aws/install --bin-dir /usr/local/bin --install-dir /usr/local/aws-cli --update

# Add a new user "actions-runner" with user id 8877
RUN useradd -u 8877 -m user

# Change to non-root privilege
USER user
